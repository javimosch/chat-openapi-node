<div id="upload" class="container mx-auto px-4 py-8">
    <div class="max-w-2xl mx-auto">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h1 class="text-2xl font-bold mb-6">Upload OpenAPI Specification</h1>
            
            <form @submit.prevent="uploadFile" class="space-y-4">
                <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center" 
                     :class="{'opacity-50': isUploading}">
                    <input 
                        type="file" 
                        ref="fileInput"
                        @change="handleFileChange"
                        :accept="inputFormat === 'csv' ? '.csv,text/csv' : '.json,application/json'"
                        class="hidden"
                        :disabled="isUploading"
                    >
                    <div v-if="!selectedFile" @click="$refs.fileInput.click()" 
                         class="cursor-pointer" :class="{ 'pointer-events-none': isUploading }">
                        <div class="text-gray-500 mb-2">
                            Click to select or drag and drop
                        </div>
                        <div class="text-sm text-gray-400">
                            Currently accepting {{ inputFormat.toUpperCase() }} files only
                        </div>
                    </div>
                    <div v-else class="text-gray-700">
                        Selected: {{ selectedFile.name }}
                    </div>
                </div>

                <!-- Upload Only Checkbox -->
                <div class="flex items-center mt-4">
                    <input 
                        type="checkbox" 
                        id="uploadOnly" 
                        v-model="uploadOnly"
                        class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        :disabled="isUploading"
                    >
                    <label for="uploadOnly" class="ml-2 block text-sm text-gray-900">
                        Upload Only (Skip Processing)
                    </label>
                </div>

                <div class="flex justify-end space-x-4">
                    <a href="/" class="px-4 py-2 text-gray-600 hover:text-gray-800" 
                       :class="{ 'pointer-events-none opacity-50': isUploading }">
                        Cancel
                    </a>
                    <button 
                        type="submit"
                        class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 focus:outline-none relative"
                        :disabled="!selectedFile || isUploading"
                        :class="{ 'opacity-50 cursor-not-allowed': !selectedFile || isUploading }"
                    >
                        <span v-if="!isUploading">Upload</span>
                        <div v-else class="flex items-center space-x-2">
                            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span>Uploading...</span>
                        </div>
                    </button>
                </div>
            </form>

            <!-- Status Message -->
            <div v-if="status" :class="['mt-4 p-4 rounded-lg', 
                status.includes('Error') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700']">
                {{ status }}
            </div>
        </div>
    </div>
</div>

<script>
// Upload Application
if (document.getElementById('upload')) {
    const { createApp, ref } = Vue

    createApp({
        data() {
            return {
                selectedFile: null,
                isUploading: false,
                status: null,
                inputFormat: '<%= inputFormat %>',
                uploadOnly: false,
                ws: null
            }
        },

        methods: {
            handleFileChange(event) {
                const file = event.target.files[0]
                const fileExtension = file.name.toLowerCase().endsWith('.csv') ? 'csv' : 'json'
                
                if (fileExtension !== this.inputFormat) {
                    this.status = `Error: Only ${this.inputFormat.toUpperCase()} files are currently accepted`
                    event.target.value = null
                    return
                }
                
                this.selectedFile = file
                this.status = null
            },

            async uploadFile() {
                if (!this.selectedFile) return
                if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
                    this.connectWebSocket()
                    await new Promise(resolve => setTimeout(resolve, 1000))
                }

                this.isUploading = true
                this.status = this.uploadOnly ? 'Uploading file...' : 'Uploading and processing file...'

                try {
                    const reader = new FileReader()
                    reader.onload = (e) => {
                        try {
                            let content = e.target.result
                            const fileType = this.selectedFile.name.toLowerCase().endsWith('.csv') ? 'csv' : 'json'

                            // For JSON files, parse and validate
                            if (fileType === 'json') {
                                content = JSON.parse(content)
                            }

                            this.ws.send(JSON.stringify({
                                type: 'upload',
                                content: content,
                                fileName: this.selectedFile.name,
                                fileType: fileType,
                                onlyUpload: this.uploadOnly
                            }))
                        } catch (error) {
                            this.status = 'Error: Invalid file format'
                            this.isUploading = false
                        }
                    }
                    reader.readAsText(this.selectedFile)
                } catch (error) {
                    this.status = 'Error: Failed to read file'
                    this.isUploading = false
                }
            },

            connectWebSocket() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:'
                const wsUrl = `${protocol}//${window.location.host}`
                this.ws = new WebSocket(wsUrl)

                this.ws.onmessage = (event) => {
                    try {
                        const data = JSON.parse(event.data)
                        if (data.type === 'upload_response') {
                            this.status = this.uploadOnly ? 'File uploaded successfully!' : 'Upload and processing complete!'
                            this.isUploading = false
                        } else if (data.type === 'error') {
                            this.status = 'Error: ' + data.data.message
                            this.isUploading = false
                        }
                    } catch (error) {
                        console.error('Failed to parse WebSocket message:', error)
                        this.status = 'Error: Failed to process server response'
                        this.isUploading = false
                    }
                }
            }
        },

        mounted() {
        }
    }).mount('#upload')
}</script>
